package com.sample.demo.v1.user;

import com.sample.demo.ClientReseponseEntity;
import com.sample.demo.ErrorCode;
import io.swagger.annotations.*;
import org.springframework.beans.factory.annotation.*;
import org.springframework.http.HttpHeaders;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import java.util.Optional;

@Controller
@RequestMapping(path="v1")
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @ApiOperation(value="登录", notes="手机号码和密码登录")
    @ApiImplicitParam(name = "phoneNum", value = "手机号码", required = true, paramType = "query")
    @PostMapping(path="/user/login")
    public @ResponseBody
    ClientReseponseEntity login (@RequestParam String phoneNum
            , @RequestParam String passWord, @RequestHeader HttpHeaders headers) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        // @RequestHeader means we can get http headerFeilds form header
        ClientReseponseEntity replayEntity = new ClientReseponseEntity();
        User user = userRepository.findUserByPhone(phoneNum);
        if (user != null){
            // cmp user password 字符串比较 用equals
            if (!user.passWord.equals(passWord)){
                replayEntity.setCode(ErrorCode.errorpassword);
            }else {
                replayEntity.res = user;
            }
        }else {
            // register new user
            User nUser = new User();
            nUser.setPhoneNum(phoneNum);
            nUser.setPassWord(passWord);
            userRepository.save(nUser);
            replayEntity.res = nUser;
        }

        return  replayEntity;
    }

    @GetMapping(path="/user/finduser")
    public @ResponseBody ClientReseponseEntity getUser(@RequestParam String userId, @RequestHeader HttpHeaders headers) {
        ClientReseponseEntity replayEntity = new ClientReseponseEntity();
        replayEntity.res = userRepository.findById(Integer.parseInt(userId));
        replayEntity.setCode(ErrorCode.success);
        if (replayEntity.res == Optional.empty()){
            replayEntity.setCode(ErrorCode.notfound);
        }
        return replayEntity;
    }
}
